#!/usr/bin/env python

#############################################################################
# ParaTrac: Scalable Tracking Tools for Parallel Applications
# Copyright (C) 2009,2010  Nan Dun <dunnan@yl.is.s.u-tokyo.ac.jp>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#############################################################################

#
# fstrac
# Filesystem Trace
#

import os
import sys
import optparse

import common
import fsdata
import fsreport

def print_version():
	from version import PARATRAC_VERSION_STRING
	sys.stdout.write(PARATRAC_VERSION_STRING)
	sys.exit(0)

def parse_argv(argv):
    usage = "Usage: %prog [OPTIONS]"
    parser = optparse.OptionParser(usage=usage,
                 formatter=OptionParserHelpFormatter())
    
    # Tracking
    parser.add_option("-t", "--track", action="store", type="string",
        dest="track", metavar="PATH", default=None,
        help="start tracking on directory PATH")
    
    parser.add_option("-m", "--mount", action="store", type="string",
        dest="mount", metavar="PATH", default=None,
        help="mount PATH and start tracking, like \"--track\", but does not "
        "bring up monitoring interface")
    
    parser.add_option("-u", "--umount", action="store", type="string",
        dest="umount", metavar="PATH", default=None,
        help="try to unmount directory PATH")
    
    parser.add_option("--poll-rate", action="store", type="float",
        dest="pollrate", metavar="NUM", default=1.0,
        help="polling rate (default: 1)")
    
    parser.add_option("--poll-rate-multi", action="store", type="float",
        dest="pollratemulti", metavar="NUM", default=2.0,
        help="polling rate mutiplier (default: 2)")
    
    parser.add_option("--auto-umount", action="store_true",
        dest="autoumount", default=False, help="try to umount after detach")
    
    # Database
    parser.add_option("--import-log", action="store", type="string",
        dest="importlog", metavar="PATH", default=None, 
        help="import log to database")
    
    parser.add_option("--merge-dbs", action="store", type="string",
        dest="mergedbs", metavar="PATH", default=None, 
        help="merge databases")
    
    # Plot
    parser.add_option("-d", "--data", action="store", type="string",
        dest="data", metavar="PATH", default=None, 
        help="path or directory of trace data")
    
    parser.add_option("-r", "--report", action="store", type="string",
        dest="report", metavar="PATH", default=None,
        help="generate report\n")
    
    parser.add_option("--rs", "--report-series", action="append", 
        type="string", dest="reportseries", metavar="SERIES", default=[],
        help="report series")
    
    parser.add_option("-p", "--plot", action="append", type="string",
        dest="plotlist", metavar="TYPE", default=[],
        help="plot types:\n"
			 "  all: plot all following statistics\n"
             "  sysc_count: system call count\n"
             "  sysc_elapsed: elapsed time of system call\n"
             "  sysc_elapsed_sum: sum of elapsed time of system call\n"
             "  io_offset: file offset in I/O\n"
             "  io_length: request bytes in one I/O call\n"
             "  io_bytes: total bytes in I/O\n"
             "  proctree: process tree in workflow\n"
             "  proctree_dot: process tree in workflow\n"
             "  workflow: workflow DAG\n"
			 "  workflow_dot: workflow in dot language\n")
    
    parser.add_option("--ps", "--plot-series", action="append", type="string",
        dest="plotseries", metavar="SERIES", default=[],
        help="plot series")
    
    parser.add_option("--plot-log-y", action="store", type="float",
        dest="plotlogy", metavar="NUM", default=1,
        help="set y axis to log scale")
    
    parser.add_option("--plot-non-interactive", action="store_false",
        dest="plotinteractive", default=True,
        help="non-interactive plotting (default: off)")
	
    parser.add_option("--plot-format", action="store", type="choice", 
        dest="plotformat", default=None,
        choices=["png","ps","pdf","svg"],
        help="plot format (default: png)")

    # Debug and user interaction
    parser.add_option("-v", "--verbosity", action="store", type="choice",
        dest="verbosity", metavar="NUM", default='0', 
        choices=['0','1','2','3'],
        help="verbosity level: 0/1/2/3 (default: 0)")

    parser.add_option("--no-prompt", action="store_false",
        dest="prompt", default=True, help="user prompt (default: on)")
    
    parser.add_option("--version", action="store_true",
        dest="version", default=False, help="show version")
    
    if len(argv) == 0:
        parser.print_help()
        sys.exit(0)

    opts, args = parser.parse_args(argv)
	
    if opts.version:
        print_version()

    # Tracking options
    if opts.track is not None:
        opts.mountpoint = os.path.abspath(opts.track)
    if opts.mount is not None:
        opts.mountpoint = os.path.abspath(opts.mount)
    if opts.umount is not None:
        opts.mountpoint = os.path.abspath(opts.umount)
    
    opts.pollrate = 1.0 / opts.pollrate
    
    # Database options

    # Plot options
    if opts.plotlist != []:
        # check data directory
        if opts.data is None:
            sys.stderr.write("error: data path or directory required\n")
            sys.exit(1)
        elif os.path.isdir(opts.data):
            opts.data = os.path.abspath("%s/trace.db" % opts.data)

    # Debug options
    # choice type only supports string, change verbosity back to number
    opts.verbosity = eval(opts.verbosity)

    return opts, args

# OptionParser help string workaround
# adapted from Tim Chase's code from following thread
# http://groups.google.com/group/comp.lang.python/msg/09f28e26af0699b1
class OptionParserHelpFormatter(optparse.IndentedHelpFormatter):
    def format_description(self, desc):
        if not desc: return ""
        desc_width = self.width - self.current_indent
        indent = " " * self.current_indent
        bits = desc.split('\n')
        formatted_bits = [
            textwrap.fill(bit, desc_width, initial_indent=indent,
                susequent_indent=indent)
            for bit in bits]
        result = "\n".join(formatted_bits) + "\n"
        return result

    def format_option(self, opt):
        result = []
        opts = self.option_strings[opt]
        opt_width = self.help_position - self.current_indent - 2
        if len(opts) > opt_width:
            opts = "%*s%s\n" % (self.current_indent, "", opts)
            indent_first = self.help_position
        else:
            opts = "%*s%-*s  " % (self.current_indent, "", opt_width, opts)
            indent_first = 0
        result.append(opts)
        if opt.help:
            help_text = self.expand_default(opt)
            help_lines = []
            for para in help_text.split("\n"):
                help_lines.extend(textwrap.wrap(para, self.help_width))
            result.append("%*s%s\n" % (indent_first, "", help_lines[0]))
            result.extend(["%*s%s\n" % (self.help_position, "", line)
                for line in help_lines[1:]])
        elif opts[-1] != "\n":
            result.append("\n")
        return "".join(result)

def main():
    opts, args = parse_argv(sys.argv[1:])

    # Tracking
    if opts.mount or opts.umount or opts.track:
        tracker = FUSETracker(opts)
    if opts.mount:
        return tracker.mount()
    if opts.umount:
        return tracker.umount()
    if opts.track:
        return tracker.track()
    
    # Report
    if opts.report:
        # check if data have been imported
        dbfile = os.path.abspath("%s/fstrace.db" % opts.report)
        if not os.path.exists(dbfile):
            sys.stdout.write("importing data from %s ..." % opts.report)
            sys.stdout.flush()
            database = fsdata.Database(dbfile, True)
            database.import_rawdata()
            sys.stdout.write("Done!")
            sys.stdout.flush()
        sys.stdout.write("Generating report ...\n")
        sys.stdout.flush()
        r = fsreport.Report(dbfile)
        r.html()
        return 0

    if opts.mergedbs:
        database = FUSETracDB("%s/merged.db" % opts.mergedbs)
        database.create_tables()
        database.merge_dbs()

    # Plot
    if opts.plotlist:
        from plot import FUSETracPlot # avoid import overhead
        plot = FUSETracPlot(opts.data, opts)
        plot.plot()
        plot.show()
        
    return 0

if __name__ == "__main__":
    sys.exit(main())
