#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'strscan'

class Node
  @kind
  @arg
  def initialize(kind, arg)
   @kind = kind
   @arg = arg
  end
  def to_s
   return "( #{@kind.to_s}, #{@arg.to_s} )"
  end
  attr_accessor :kind, :arg
end

class PMK < Racc::Parser

module_eval(<<'...end pmk.y/module_eval...', 'pmk.y', 79)
  
  def parse_all(str)
    @yydebug = false
    @tokens = []
    p str
    ss = StringScanner.new(str)
    head = true
    until ss.eos?
      if s = ss.scan(/\\\\/) # escape \\
        @tokens.push [:OTHER, s]
      elsif s = ss.scan(/\\\n/) # escape return
        @tokens.push [:OTHER, s]
      elsif s = ss.scan(/\n/) #after return
        head =true
        @tokens.push ['\n',s]
        next
      elsif s = ss.scan(/\$\$/) # escape $
        @tokens.push [:OTHER, s]
      elsif s = ss.scan(/\w+/) #ordinary word
        if head
          if s == "ifneq" #conditions
        	  @tokens.push [:IFNEQ, s]
          elsif s == "else"
	          @tokens.push [:ELSE, s]
	        elsif s == "endif"
	          @tokens.push [:ENDIF,s]
	        else
	          @tokens.push [:OTHER, s]
	        end
  	    else
          @tokens.push [:OTHER, s]	      
	      end
      elsif s = ss.scan(/\:\=/) #2 length symbols
        @tokens.push [s, s]
      elsif s = ss.scan(/[\$\(\)\{\}\t\:\=\,]/) #symbols
        @tokens.push [s, s]
      else
        s = ss.scan(/[^\$\(\)\{\}\t\:\=\n\,]+/) #other
        @tokens.push [:OTHER, s]
      end
      head = false
    end
    p @tokens
    do_parse
  end

  def next_token
    @tokens.shift
  end

...end pmk.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,     7,    63,    30,   -17,    10,    12,    31,    38,     1,
     5,     7,     6,     8,   -17,    10,    12,    66,    67,     1,
     5,     7,     6,     8,   -17,    10,    12,    26,    27,     1,
     5,     7,     6,     8,   -17,    10,    12,    54,    59,     1,
     5,     7,     6,     8,   -17,    10,    12,    41,    48,     1,
    62,    39,     6,     8,    16,    18,    21,    22,    24,    64,
    65,    37,    15,    68,    69,    17,    19,    16,    18,    21,
    22,    24,    28,    55,    72,    15,    73,   nil,    17,    19,
    16,    18,    21,    22,    24,   nil,   nil,   nil,    15,   nil,
   nil,    17,    19,    16,    18,    21,    22,    24,   nil,   nil,
   nil,    15,   nil,   nil,    17,    19,    16,    18,    21,    22,
    24,   nil,   nil,   nil,    15,   nil,   nil,    17,    19,    16,
    18,    21,    22,    24,   nil,   nil,   nil,    15,   nil,   nil,
    17,    19,    16,    18,    21,    22,    24,   nil,   nil,   nil,
    15,   nil,   nil,    17,    19,    16,    18,    21,    22,    24,
   nil,   nil,   nil,    15,   nil,   nil,    17,    19,    16,    18,
    21,    22,    24,   nil,   nil,   nil,    15,   nil,   nil,    17,
    19,    16,    18,    21,    22,    24,   nil,   nil,   nil,    43,
   nil,   nil,   nil,    44,    16,    18,    21,    22,    24,   nil,
   nil,   nil,    15,   nil,   nil,    17,    19,    16,    18,    21,
    22,    24,   nil,   nil,   nil,    15,   nil,   nil,    17,    19,
    16,    18,    21,    22,    24,   nil,   nil,   nil,    15,   nil,
   nil,    17,    19,    16,    18,    21,    22,    24,   nil,   nil,
   nil,    15,   nil,   nil,    17,    19,    16,    18,    21,    22,
    24,   nil,    35,   nil,    15,   nil,     1,    17,    19,     6,
     8,    35,   nil,   nil,   nil,     1,   nil,   nil,     6,     8,
   -10,   nil,   -15,   -15,   nil,    37 ]

racc_action_check = [
     0,     0,    52,     6,     0,     0,     0,     6,    11,     0,
    40,    40,     0,     0,    40,    40,    40,    57,    57,    40,
    66,    66,    40,    40,    66,    66,    66,     2,     2,    66,
     5,     5,    66,    66,     5,     5,     5,    33,    42,     5,
    41,    41,     5,     5,    41,    41,    41,    14,    25,    41,
    46,    12,    41,    41,    44,    44,    44,    44,    44,    53,
    56,    37,    44,    60,    61,    44,    44,     7,     7,     7,
     7,     7,     3,    38,    70,     7,    71,   nil,     7,     7,
     8,     8,     8,     8,     8,   nil,   nil,   nil,     8,   nil,
   nil,     8,     8,    43,    43,    43,    43,    43,   nil,   nil,
   nil,    43,   nil,   nil,    43,    43,    65,    65,    65,    65,
    65,   nil,   nil,   nil,    65,   nil,   nil,    65,    65,     1,
     1,     1,     1,     1,   nil,   nil,   nil,     1,   nil,   nil,
     1,     1,    39,    39,    39,    39,    39,   nil,   nil,   nil,
    39,   nil,   nil,    39,    39,    31,    31,    31,    31,    31,
   nil,   nil,   nil,    31,   nil,   nil,    31,    31,    15,    15,
    15,    15,    15,   nil,   nil,   nil,    15,   nil,   nil,    15,
    15,    17,    17,    17,    17,    17,   nil,   nil,   nil,    17,
   nil,   nil,   nil,    17,    19,    19,    19,    19,    19,   nil,
   nil,   nil,    19,   nil,   nil,    19,    19,    20,    20,    20,
    20,    20,   nil,   nil,   nil,    20,   nil,   nil,    20,    20,
    27,    27,    27,    27,    27,   nil,   nil,   nil,    27,   nil,
   nil,    27,    27,    26,    26,    26,    26,    26,   nil,   nil,
   nil,    26,   nil,   nil,    26,    26,    30,    30,    30,    30,
    30,   nil,    28,   nil,    30,   nil,    28,    30,    30,    28,
    28,     9,   nil,   nil,   nil,     9,   nil,   nil,     9,     9,
    10,   nil,    10,    10,   nil,    10 ]

racc_action_pointer = [
    -2,   116,    23,    66,   nil,    28,    -8,    64,    77,   244,
   258,     8,    40,   nil,    45,   155,   nil,   168,   nil,   181,
   194,   nil,   nil,   nil,   nil,    35,   220,   207,   235,   nil,
   233,   142,   nil,    21,   nil,   nil,   nil,    54,    73,   129,
     8,    38,    25,    90,    51,   nil,    34,   nil,   nil,   nil,
   nil,   nil,   -11,    43,   nil,   nil,    48,     8,   nil,   nil,
    50,    48,   nil,   nil,   nil,   103,    18,   nil,   nil,   nil,
    61,    66,   nil,   nil ]

racc_action_default = [
    -4,   -24,   -36,   -36,    -9,    -4,   -36,   -24,   -24,   -17,
   -22,   -36,   -36,    -1,   -36,   -24,   -34,   -36,   -33,   -24,
   -24,   -35,   -32,   -30,   -31,   -36,   -24,   -24,   -17,    -3,
   -24,   -24,    -5,   -36,   -16,   -22,   -14,   -15,   -36,   -36,
    -4,    -4,   -36,   -24,   -24,   -29,   -36,   -23,   -20,    -6,
    -7,    -8,   -36,   -36,   -21,    74,   -36,   -36,    -2,   -27,
   -36,   -36,   -28,   -18,   -19,   -36,    -4,   -12,   -25,   -26,
   -36,   -36,   -13,   -11 ]

racc_goto_table = [
    13,    25,    36,    34,    11,    29,    56,    32,    33,    40,
    45,   nil,   nil,   nil,   nil,    42,   nil,   nil,   nil,    46,
    47,   nil,    51,   nil,   nil,   nil,    49,    50,   nil,    36,
    52,    53,    70,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    57,    58,   nil,    60,    61,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    71 ]

racc_goto_check = [
     2,     4,     5,     6,     1,     2,     9,     4,     4,     8,
    11,   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,     4,
     4,   nil,     6,   nil,   nil,   nil,     4,     4,   nil,     5,
     4,     4,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,     2,   nil,     4,     4,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     4,     0,   nil,     0,    -8,    -6,   nil,    -3,   -33,
   nil,    -7 ]

racc_goto_default = [
   nil,   nil,   nil,    14,   nil,     2,     3,     4,   nil,    20,
     9,    23 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 18, :_reduce_none,
  3, 19, :_reduce_2,
  2, 19, :_reduce_3,
  0, 19, :_reduce_4,
  2, 20, :_reduce_5,
  3, 20, :_reduce_6,
  3, 20, :_reduce_7,
  3, 20, :_reduce_8,
  1, 20, :_reduce_none,
  1, 20, :_reduce_10,
  6, 24, :_reduce_11,
  4, 24, :_reduce_12,
  5, 25, :_reduce_13,
  2, 22, :_reduce_14,
  1, 22, :_reduce_15,
  2, 23, :_reduce_16,
  0, 23, :_reduce_17,
  4, 27, :_reduce_18,
  4, 27, :_reduce_19,
  3, 27, :_reduce_20,
  3, 27, :_reduce_21,
  1, 27, :_reduce_22,
  2, 21, :_reduce_23,
  0, 21, :_reduce_24,
  4, 26, :_reduce_25,
  4, 26, :_reduce_26,
  3, 26, :_reduce_27,
  3, 26, :_reduce_28,
  2, 26, :_reduce_29,
  1, 26, :_reduce_30,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_35 ]

racc_reduce_n = 36

racc_shift_n = 74

racc_token_table = {
  false => 0,
  :error => 1,
  "\\n" => 2,
  "\\t" => 3,
  "=" => 4,
  ":=" => 5,
  ":" => 6,
  :OTHER => 7,
  :IFNEQ => 8,
  :ELSE => 9,
  :ENDIF => 10,
  "(" => 11,
  "," => 12,
  ")" => 13,
  "$" => 14,
  "{" => 15,
  "}" => 16 }

racc_nt_base = 17

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"\\\\n\"",
  "\"\\\\t\"",
  "\"=\"",
  "\":=\"",
  "\":\"",
  "OTHER",
  "IFNEQ",
  "ELSE",
  "ENDIF",
  "\"(\"",
  "\",\"",
  "\")\"",
  "\"$\"",
  "\"{\"",
  "\"}\"",
  "$start",
  "target",
  "lines",
  "select_kind",
  "exps",
  "var",
  "tgt_exps",
  "conditions",
  "if_cond",
  "cm_exp",
  "tgt_exp",
  "other" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'pmk.y', 15)
  def _reduce_2(val, _values, result)
    result=[val[0]] + val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 16)
  def _reduce_3(val, _values, result)
    result=val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 17)
  def _reduce_4(val, _values, result)
    result=[]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 19)
  def _reduce_5(val, _values, result)
    result=Node.new(:com, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 20)
  def _reduce_6(val, _values, result)
    result=Node.new(:def, [val[0],val[2]] )
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 21)
  def _reduce_7(val, _values, result)
    result=Node.new(:def2, [val[0],val[2]] )
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 22)
  def _reduce_8(val, _values, result)
    result=Node.new(:dep, [val[0],val[2]] )
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'pmk.y', 24)
  def _reduce_10(val, _values, result)
    result=[]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 27)
  def _reduce_11(val, _values, result)
    result = Node.new(:ifneq_else, [val[1],val[2],val[4]] )
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 28)
  def _reduce_12(val, _values, result)
    result = Node.new(:if_neq, [val[1],val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 31)
  def _reduce_13(val, _values, result)
    result = Node.new(:if_cond,[val[1],val[3]])
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 33)
  def _reduce_14(val, _values, result)
    result=[val[0]]+val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 34)
  def _reduce_15(val, _values, result)
     result=[val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 36)
  def _reduce_16(val, _values, result)
    result= val[0]+val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 37)
  def _reduce_17(val, _values, result)
    result=[]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 39)
  def _reduce_18(val, _values, result)
     result=[Node.new(:var, val[2])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 40)
  def _reduce_19(val, _values, result)
     result=[Node.new(:var, val[2])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 41)
  def _reduce_20(val, _values, result)
     result=[val[0]]+val[1]+[val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 42)
  def _reduce_21(val, _values, result)
     result=[val[0]]+val[1]+[val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 43)
  def _reduce_22(val, _values, result)
     result=[val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 45)
  def _reduce_23(val, _values, result)
    result= val[0]+val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 46)
  def _reduce_24(val, _values, result)
    result=[]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 48)
  def _reduce_25(val, _values, result)
     result=[Node.new(:var, val[2])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 49)
  def _reduce_26(val, _values, result)
     result=[Node.new(:var, val[2])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 50)
  def _reduce_27(val, _values, result)
     result=[val[0]]+val[1]+[val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 51)
  def _reduce_28(val, _values, result)
     result=[val[0]]+val[1]+[val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 52)
  def _reduce_29(val, _values, result)
     result=[val[0]]+[val[1]]        
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 53)
  def _reduce_30(val, _values, result)
     result=[val[0]] 
    result
  end
.,.,

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'pmk.y', 59)
  def _reduce_35(val, _values, result)
     result=val[0] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class PMK


def test
calc = PMK.new
  begin
    @racc_debug_out = STDERR
#    str ="ifneq($(RUNTIME_CONF), )\n\techo hoge\nendif"
    str ="ifneq(a,b)\na=b\nendif\n"
    str ="GENE_NER_FILTER_OPTS=\
         -tag  Article \
         -a    filter \
         -thr  0.0 \
         -m    $(GENE_NER_DIR)/model/filter.output \
         -s    $(GENE_NER_DIR)/model/filter.dict \
         -init $(GENE_NER_DIR)/model/gena.mtn\n"


    puts str
    res =  calc.parse_all(str)
    p "res"
    puts res.to_s
  rescue ParseError
    puts 'parse error:'
  end
end

#test
