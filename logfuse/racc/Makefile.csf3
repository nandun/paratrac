# $Id: Makefile,v 1.94 2009/07/15 01:50:22 ryohei Exp $

base = sample
link = `echo $(base) | sed "s/.*\///"`
sentences = $(base).sentences
origdbfile = $(base).data.orig.db
preddbfile = $(base)-www.db
sentdbfile = $(base).sentences.db
noundbfile = $(base).noun.db
ccorigdbfile = $(base)-cc-orig.db

thesaurus = BGH
# del_cases_args = --mikaku
rank = 0
pruning_ratio = 0
cutoff_ratio = 0
compound = 1

basedir = .
scriptsdir = $(basedir)/scripts
pmdir =
datadir = $(basedir)/data
knpdir = $(HOME)/knp

rn = rn
suru = 
others = others
debug =

ifneq ($(rn),rn)
sotolist = $(datadir)/soto.list.100
else
sotolist = $(datadir)/soto.list.100.rn
endif
soutailist = $(datadir)/SOUTAIMEISHI.dic
suplist = $(datadir)/supplement-verb.lst

ifeq ($(suru),suru)
cf_clustering_extra_args += --suru
endif

ifeq ($(debug),debug)
opt = --debug
endif

ifeq ($(hierarchical),hierarchical)
cf_clustering_extra_args += --hierarchical
endif

NAME = cf
DATE = `date +%Y%m%d`

comment = $(DATE)

PERL = perl -I$(scriptsdir) -I$(pmdir)

all: $(base).formatted

$(base).1st.formatted:
ifeq ($(suru),suru)
	$(PERL) $(scriptsdir)/fold-suru-pa.perl $(base).data.basic | sort -k 2 > $(base)$(suru).data.basic
endif
ifeq ($(others),others)
	$(PERL) $(scriptsdir)/cf-simple-tools-for-data.perl --num --rest --rank $(rank) --pruning-ratio $(pruning_ratio) --cutoff-ratio $(cutoff_ratio) $(base)$(suru).data.basic > $(base).data.basic.rest
endif
	$(PERL) $(scriptsdir)/cf-clustering.perl --num --thesaurus $(thesaurus) $(cf_clustering_extra_args) --comment $(comment) --rank $(rank) --pruning-ratio $(pruning_ratio) $(base)$(suru).data.basic $(opt) > $@ 2> $(base).1st.log

$(base)-cross.formatted: $(base).1st.formatted
	$(PERL) $(scriptsdir)/cf-cf-clustering.perl --thesaurus $(thesaurus) --external $< > $@ 2> $(base)-cross.log

$(base)-cross-wa.formatted: $(base)-cross.formatted
	$(PERL) $(scriptsdir)/wa-assign.perl --semantic --num --basic --thesaurus $(thesaurus) $(opt) --data $@ $< < $(base)$(suru).data.basic > $(base)-cross-wa.result 2> $(base)-cross-wa.log

$(base)-cross-wa-soto.formatted: $(base)-cross-wa.formatted
	$(PERL) $(scriptsdir)/soto-analysis.perl --num --basic --thesaurus $(thesaurus) --soutai $(soutailist) $(opt) --data $@ $< < $(base)$(suru).data.basic > $(base)-cross-wa-soto.result 2> $(base)-cross-wa-soto.log

$(base)-cross-wa-soto-delwa.formatted: $(base)-cross-wa-soto.formatted
ifeq ($(others),others)
	$(PERL) $(scriptsdir)/cf-distribute-rest.perl --debug --num --thesaurus $(thesaurus) --nomake $< $(base).data.basic.rest > $(base)-cross-wa-soto-others_tmp.formatted 2> $(base)-cross-wa-soto-others_tmp.log
	$(PERL) $(scriptsdir)/cf-delete-redundant-cases.perl $(del_cases_args) $(base)-cross-wa-soto-others_tmp.formatted > $@
	rm -f $(base)-cross-wa-soto-others_tmp.formatted
else
	$(PERL) $(scriptsdir)/cf-delete-redundant-cases.perl $(del_cases_args) $< > $@
endif

$(base)-cross-wa-soto-delwa-sub.formatted: $(base)-cross-wa-soto-delwa.formatted
	$(PERL) $(scriptsdir)/cf-check-subsumption.perl --thesaurus $(thesaurus) $< > $(base)-cross-wa-soto-delwa-sub_tmp.formatted
ifeq ($(suru),suru)
	$(PERL) $(scriptsdir)/unfold-suru-cf.perl $(base)-cross-wa-soto-delwa-sub_tmp.formatted > $@
	rm -f $(base)-cross-wa-soto-delwa-sub_tmp.formatted
else
	mv -f $(base)-cross-wa-soto-delwa-sub_tmp.formatted $@
endif

$(base)-cross-wa-soto-delwa-sub-refined.formatted: $(base)-cross-wa-soto-delwa-sub.formatted
ifeq ($(thesaurus),cf)
	cp $< $@
else
ifneq ($(rn),rn)
	$(PERL) $(scriptsdir)/refine-sm.perl --thesaurus $(thesaurus) $< > $@ 2> $(base)-cross-wa-soto-delwa-sub-refined.log
else
	$(PERL) $(scriptsdir)/refine-sm.perl --rn --thesaurus $(thesaurus) $(opt) $< > $@ 2> $(base)-cross-wa-soto-delwa-sub-refined.log
endif
endif

$(base)-cross-wa-soto-delwa-sub-refined-or.formatted: $(base)-cross-wa-soto-delwa-sub-refined.formatted
ifneq ($(rn),rn)
	$(PERL) $(scriptsdir)/make-or-frame.perl $< > $@
else
	$(PERL) $(scriptsdir)/make-or-frame.perl --rn $< > $@
endif

$(base)-cross-wa-soto-delwa-sub-refined-or-sorted.formatted: $(base)-cross-wa-soto-delwa-sub-refined-or.formatted
	$(PERL) $(scriptsdir)/formatted-sort.perl $< > $@

$(base)-cross-wa-soto-delwa-sub-refined-or-sorted-cs.formatted: $(base)-cross-wa-soto-delwa-sub-refined-or-sorted.formatted
	$(PERL) $(scriptsdir)/case-similarity.perl --thesaurus $(thesaurus) $< > $@ 2> $(base)-cross-wa-soto-delwa-sub-refined-or-sorted-cs.log

$(base)-cross-wa-soto-delwa-sub-refined-or-sorted-cs-sm.formatted: $(base)-cross-wa-soto-delwa-sub-refined-or-sorted-cs.formatted
	$(PERL) $(scriptsdir)/cf-give-extra-sm.perl --thesaurus $(thesaurus) $< > $@

$(base)-cross-wa-soto-delwa-sub-refined-or-sorted-cs-sm-postprocessed.formatted: $(base)-cross-wa-soto-delwa-sub-refined-or-sorted-cs-sm.formatted
	$(PERL) $(scriptsdir)/cf-post-process.perl --debug $< > $@ 2> $(base)-cross-wa-soto-delwa-sub-refined-or-sorted-cs-sm-postprocessed.log

$(base)-cross-wa-soto-delwa-sub-refined-or-sorted-cs-sm-postprocessed-cutoff.formatted: $(base)-cross-wa-soto-delwa-sub-refined-or-sorted-cs-sm-postprocessed.formatted
	$(PERL) $(scriptsdir)/cf-cutoff.perl $< > $@

formatted: $(base).formatted $(base).cfsim.dat

$(base).formatted: $(base)-cross-wa-soto-delwa-sub-refined-or-sorted-cs-sm-postprocessed.formatted
	ln -sf $(link)-cross-wa-soto-delwa-sub-refined-or-sorted-cs-sm-postprocessed.formatted $@

cutoff-formatted: $(base)-cutoff.formatted $(base).cfsim.dat

$(base)-cutoff.formatted: $(base)-cross-wa-soto-delwa-sub-refined-or-sorted-cs-sm-postprocessed-cutoff.formatted
	ln -sf $(link)-cross-wa-soto-delwa-sub-refined-or-sorted-cs-sm-postprocessed-cutoff.formatted $@

$(base)-cross-wa-soto-delwa-sub-refined-or-sorted-cs-sm-postprocessed-cutoff.knpdict: $(base).formatted

$(base).knpdict: $(base).formatted
ifneq ($(rn),rn)
	$(PERL) $(scriptsdir)/formatted2knpdict.perl --thesaurus $(thesaurus) $< > $@
else	
	$(PERL) $(scriptsdir)/formatted2knpdict.perl --rn --thesaurus $(thesaurus) $< > $@
endif


$(base)-cross-wa-soto-delwa-sorted-cs-postprocessed.formatted: $(base)-cross-wa-soto-delwa-sorted-cs.formatted
	$(PERL) $(scriptsdir)/cf-post-process.perl --debug $< > $@ 2> $(base)-cross-wa-soto-delwa-sorted-cs-postprocessed.log

$(base)-cross-wa-soto-delwa-sorted-cs.formatted: $(base)-cross-wa-soto-delwa-sorted.formatted
	$(PERL) $(scriptsdir)/case-similarity.perl --thesaurus $(thesaurus) $< > $@ 2> /dev/null

$(base)-cross-wa-soto-delwa-sorted.formatted: $(base)-cross-wa-soto-delwa.formatted
	$(PERL) $(scriptsdir)/formatted-sort.perl $< > $@

$(base).html: $(base)-cross-wa-soto-delwa-sorted-cs-postprocessed.formatted
	$(PERL) $(scriptsdir)/cf-post-process.perl --html $< > $@

$(base).jmn: $(sentences)
	-juman -B -e2 -i \# < $(sentences) > $(base).jmn

$(base).knp: $(base).jmn
	knp -dpnd -check -no-cky -tab $(ne) < $(base).jmn > $(base).knp.orig
	tac $(base).knp.orig | $(PERL) $(scriptsdir)/feature2bnst.perl | tac > $(base).knp

$(base).data: $(base).knp
ifneq ($(rn),rn)
	cat $< | $(PERL) $(scriptsdir)/make-caseframe.perl --compound $(compound) --data $@
else
	cat $< | $(PERL) $(scriptsdir)/make-caseframe.perl --rn --compound $(compound) --data $@
endif

$(base).data.orig: $(base).data
	$(PERL) $(scriptsdir)/make-caseframe-filter.perl $< | sort -k 2 > $@

data.basic: $(base).data.basic

$(base).data.basic: $(base).data.orig
	$(PERL) $(scriptsdir)/delete-sid.perl $< | uniq -c | sort -k 2,2 -k 1,1nr > $@

$(base)-noquest.ex:
	$(PERL) $(scriptsdir)/example.perl --num --lst $(suplist) $(base).data.basic > $@ 2> $(base)-quest.ex

$(base)-supplement.lst: $(base)-noquest.ex
	$(PERL) $(scriptsdir)/distribute.perl --lst $(suplist) $(base)-quest.ex $< > $@

$(base)-supplement.data: $(base)-supplement.lst
	$(PERL) $(scriptsdir)/supplement.perl --databasic $(base).data.basic --lst $(suplist) < $< > $@
	if [ -f $(base).data.basic ]; then \
		mv -f $(base).data.basic $(base).data.basic.bak; \
	fi
	sort -k 2,2 -k 1,1nr $@ > $(base).data.basic
	touch -r $(base)-noquest.ex $(base).data.basic

supplement: $(base)-supplement.data

$(base).cfsim.dat: $(base)-cross-wa-soto-delwa-sub-refined-or-sorted-cs-sm-postprocessed.formatted
	$(PERL) $(scriptsdir)/calc-cf-similarity.perl --thesaurus $(thesaurus) $< > $@

$(base).cfsim.db: $(base).cfsim.dat
	$(knpdir)/system/make_db $@ < $<

$(base).db: $(base).knpdict
	$(knpdir)/system/ipal $(base).idx $(base).dat < $<
	$(knpdir)/system/make_db $@ -append / < $(base).idx

knpdict:
	make $(base).db base=$(base)
	make $(base).cfsim.db base=$(base)

$(origdbfile): $(base).data.orig
	$(PERL) $(scriptsdir)/make-data-orig-addr-db.perl --db $@ $<

origdb:
	make $(origdbfile) base=$(base)

$(preddbfile): $(base)-www.formatted
	$(PERL) $(scriptsdir)/make-formatted-db.perl --db $@ $<

preddb:
	make $(preddbfile) base=$(base)

$(sentdbfile): $(sentences)
	$(PERL) $(scriptsdir)/make-orig-db.perl --db $@ $<

$(base)-www.formatted: $(base)-cross-wa-soto-delwa-sub-refined-or-sorted-cs-sm-postprocessed.formatted
	ln -sf $(link)-cross-wa-soto-delwa-sub-refined-or-sorted-cs-sm-postprocessed.formatted $@

$(noundbfile): $(base)-www.formatted
	$(PERL) $(scriptsdir)/make-noun-db.perl --db $@ $<

$(ccorigdbfile): $(base).data.orig $(origdbfile) $(base)-www.formatted
	$(PERL) $(scriptsdir)/make-cc-orig-db.perl --dataorig $(base).data.orig --dataorigdb $(origdbfile) --db $@ < $(base)-www.formatted

sentdb:
	make $(sentdbfile) base=$(base)

noundb:
	make $(noundbfile) base=$(base)

ccorigdb: 
	make $(ccorigdbfile) base=$(base)
wwwdb:
	make origdb preddb sentdb noundb ccorigdb


clean:
	rm -f $(base)*.idx $(base)*.dat $(base)*.db $(base)*.formatted $(base)*.log $(base)*.result $(base).html $(base)*.knpdict $(base).data.orig $(base).data.basic $(base).data.basic.rest $(base).data $(base)*.ex $(base).knp $(base).jmn

package:
	mkdir ../$(NAME)
	tar --exclude CVS -chf - README Makefile sample.sentences index.cgi help.html cf-cgi.conf cf.css perl data scripts data doc | tar xpf - -C ../$(NAME)
	GZIP=-9 tar -C .. -zchf $(NAME)-$(DATE).tar.gz $(NAME)
	rm -rf ../$(NAME)
