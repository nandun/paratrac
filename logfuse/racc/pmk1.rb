#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'strscan'

class Nvar
  def initialize(kind, arg)
   @kind = kind
   @arg = arg
  end
  def to_s
   return "( #{@kind.to_s}, #{@arg.to_s} )"
  end
  attr_accessor :kind, :arg
end

class PMK2 < Racc::Parser

module_eval(<<'...end pmk1.y/module_eval...', 'pmk1.y', 55)

  attr_accessor :yydebug
  def parse_line(line)
  	@line = line
    @yydebug = false
    @racc_debug_out = STDERR
    @ss = StringScanner.new(line)
    @readed = ""
    do_parse
  end
  
  def next_token
    return nil if @ss.eos?
    ret =
      if s = @ss.scan(/\$\$/) #escape $
          [:OTHER,'$']
	    elsif s = @ss.scan(/\$\@|\$\%|\$\<|\$\?|\$\^|\$\+|\$\*/) #autovar symbols
	        [:AUTOVAR, s]
	    elsif s = @ss.scan(/[\{\}\(\)\$]/) #symbols
	        [s, s]
#	    elsif s = @ss.scan(/[\t\ ]*\w+[\t\ ]*/) #ordinary word
#	      st= s.strip
#       if st =~ /^(subst|patsubst|strip|findstring|filter|filter-out)$/ #function keyword
#        	  [:COND, st]
#        else
#            [:OTHER, s]
#        end
	    else
	      s = @ss.scan(/[^\{\}\(\)\$]+/) #other
	        [:OTHER, s]
	    end
	  @readed += s
    return ret
  end
  
  
  def on_error(t, val, vstack)
    puts @readed +" <here>"
    puts "\nparse error on value #{val.inspect} (#{token_to_str(t)})"
    raise ParseError, ""
  end 
...end pmk1.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     4,     6,     7,     8,     9,    10,    11,    19,    13,    22,
    15,    12,    10,    11,    19,    13,    16,    15,    24,    10,
    11,    13,   nil,    15 ]

racc_action_check = [
     1,     1,     1,     1,     1,     1,     1,    17,    17,    17,
    17,     2,    17,    17,    18,    18,    12,    18,    18,    18,
    18,    10,   nil,    10 ]

racc_action_pointer = [
   nil,    -2,    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    18,   nil,    16,   nil,   nil,   nil,   nil,     5,    12,   nil,
   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,    -1,   -19,    -2,    -5,    -4,    -6,    -7,    -8,    -9,
   -19,   -11,   -19,   -15,   -10,   -15,    25,   -19,   -19,   -17,
   -16,   -18,   -12,   -14,   -13 ]

racc_goto_table = [
    17,     5,    18,     3,     1,    14,     2 ]

racc_goto_check = [
     6,     4,     6,     3,     2,     5,     1 ]

racc_goto_pointer = [
   nil,     6,     4,     2,     0,    -5,   -13,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,    20,    21,   nil,    23 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 10, :_reduce_none,
  2, 11, :_reduce_2,
  0, 11, :_reduce_3,
  1, 12, :_reduce_none,
  1, 12, :_reduce_5,
  1, 12, :_reduce_6,
  1, 12, :_reduce_7,
  1, 12, :_reduce_8,
  1, 12, :_reduce_9,
  2, 13, :_reduce_10,
  1, 13, :_reduce_11,
  3, 14, :_reduce_12,
  3, 14, :_reduce_13,
  2, 15, :_reduce_14,
  0, 15, :_reduce_15,
  1, 16, :_reduce_none,
  1, 16, :_reduce_17,
  1, 16, :_reduce_none ]

racc_reduce_n = 19

racc_shift_n = 25

racc_token_table = {
  false => 0,
  :error => 1,
  :OTHER => 2,
  "(" => 3,
  ")" => 4,
  "{" => 5,
  "}" => 6,
  "$" => 7,
  :AUTOVAR => 8 }

racc_nt_base = 9

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "OTHER",
  "\"(\"",
  "\")\"",
  "\"{\"",
  "\"}\"",
  "\"$\"",
  "AUTOVAR",
  "$start",
  "target",
  "exp",
  "word",
  "var",
  "bracket",
  "in_exp",
  "in_word" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'pmk1.y', 15)
  def _reduce_2(val, _values, result)
    result= val[0]+val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk1.y', 16)
  def _reduce_3(val, _values, result)
    result=[]
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'pmk1.y', 19)
  def _reduce_5(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk1.y', 20)
  def _reduce_6(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk1.y', 21)
  def _reduce_7(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk1.y', 22)
  def _reduce_8(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk1.y', 23)
  def _reduce_9(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk1.y', 25)
  def _reduce_10(val, _values, result)
     result=[Nvar.new(:vars,     val[1].slice(1,val[1].size-2))] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk1.y', 26)
  def _reduce_11(val, _values, result)
     result=[Nvar.new(:autovar, val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk1.y', 28)
  def _reduce_12(val, _values, result)
     result=[val[0]]+val[1]+[val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk1.y', 29)
  def _reduce_13(val, _values, result)
     result=[val[0]]+val[1]+[val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk1.y', 31)
  def _reduce_14(val, _values, result)
    result= val[0]+val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk1.y', 32)
  def _reduce_15(val, _values, result)
    result=[]
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'pmk1.y', 35)
  def _reduce_17(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

# reduce 18 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class PMK2



def test2
calc = PMK2.new
  begin
    @racc_debug_out = STDERR
#    str ="ifneq($(RUNTIME_CONF), )\n\techo hoge\nendif"
    str ="ifneq(a,b)\na=b\nendif\n"
    str ="GENE_NER_FILTER_OPTS=\
         -tag  Article \
         -a    filter \
         -thr  0.0 \
         -m    $(shell echo $(GENE_E))/model/filter.output \
         -s    $(GENE_NER_DIR)/model/filter.dict \
         -init $(GENE_NER_DIR)/model/gena.mtn\n"


    puts str
    res =  calc.parse_line(str)
    p "res"
    p res
  rescue ParseError
    puts 'parse error:'
  end
end

#test2
