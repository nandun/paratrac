#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'strscan'

class Node
  @kind
  @arg
  def initialize(kind, arg)
   @kind = kind
   @arg = arg
  end
  attr_accessor :kind, :arg
end

class PMK < Racc::Parser

module_eval(<<'...end pmk.y/module_eval...', 'pmk.y', 40)
  
  def parse_all(str)
    @tokens = []
    ss = StringScanner.new(str)
    until ss.eos?
      if s = ss.scan(/\$\$/) # escape $
        @tokens.push [:OTHER, s]
      elsif s = ss.scan(/[\$\(\)\{\}]/) #symbols
        @tokens.push [s, s]
      else
        s = ss.scan(/[^\$\(\)\{\}]+/) #other
        @tokens.push [:OTHER, s]
      end
    end
    p @tokens
    do_parse
  end

  def next_token
    @tokens.shift
  end

...end pmk.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,     3,    18,     4,    17,     5,     2,     3,    14,     4,
    19,     5,     2,     3,    20,     4,    21,     5,     2,     3,
   nil,     4,   nil,     5,     2,     3,   nil,     4,   nil,     5,
     2,     3,     9,     4,    10,     5,    11 ]

racc_action_check = [
     0,     0,    13,     0,    12,     0,     1,     1,     6,     1,
    14,     1,    10,    10,    15,    10,    16,    10,     3,     3,
   nil,     3,   nil,     3,     4,     4,   nil,     4,   nil,     4,
     9,     9,     2,     9,     2,     9,     2 ]

racc_action_pointer = [
    -2,     4,    29,    16,    22,   nil,     8,   nil,   nil,    28,
    10,   nil,     0,    -4,    10,    10,    10,   nil,   nil,   nil,
   nil,   nil ]

racc_action_default = [
    -3,    -3,   -10,    -3,    -3,    -9,   -10,    -1,    -2,    -3,
    -3,    -8,   -10,   -10,   -10,   -10,   -10,    -6,    -7,    22,
    -4,    -5 ]

racc_goto_table = [
     7,     8,     6,    12,    13,   nil,   nil,   nil,   nil,    15,
    16 ]

racc_goto_check = [
     2,     2,     1,     2,     2,   nil,   nil,   nil,   nil,     2,
     2 ]

racc_goto_pointer = [
   nil,     2,     0,   nil ]

racc_goto_default = [
   nil,   nil,   nil,     1 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 9, :_reduce_none,
  2, 10, :_reduce_2,
  0, 10, :_reduce_3,
  4, 11, :_reduce_4,
  4, 11, :_reduce_5,
  3, 11, :_reduce_6,
  3, 11, :_reduce_7,
  2, 11, :_reduce_8,
  1, 11, :_reduce_9 ]

racc_reduce_n = 10

racc_shift_n = 22

racc_token_table = {
  false => 0,
  :error => 1,
  "$" => 2,
  "(" => 3,
  ")" => 4,
  "{" => 5,
  "}" => 6,
  :OTHER => 7 }

racc_nt_base = 8

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"$\"",
  "\"(\"",
  "\")\"",
  "\"{\"",
  "\"}\"",
  "OTHER",
  "$start",
  "target",
  "exps",
  "exp" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'pmk.y', 15)
  def _reduce_2(val, _values, result)
    result= val[0]+val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 16)
  def _reduce_3(val, _values, result)
    result=[]
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 18)
  def _reduce_4(val, _values, result)
     result=[Node.new(:var, val[2])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 19)
  def _reduce_5(val, _values, result)
     result=[Node.new(:var, val[2])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 20)
  def _reduce_6(val, _values, result)
     result=[val[0]]+val[1]+[val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 21)
  def _reduce_7(val, _values, result)
     result=[val[0]]+val[1]+[val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 22)
  def _reduce_8(val, _values, result)
     result=[val[0]]+[val[1]]        
    result
  end
.,.,

module_eval(<<'.,.,', 'pmk.y', 23)
  def _reduce_9(val, _values, result)
     result=[val[0]] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class PMK


def test
calc = PMK.new
  begin
    @yydebug = true
    @racc_debug_out = STDERR
    str ="$($$$())"
    puts str
    res =  calc.parse_all(str)
    p "res"
    p res
  rescue ParseError
    puts 'parse error:'
  end
end
