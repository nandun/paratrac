ifneq(a,b)
a=b\
c=d
endif
"res"
[#<Node:0x2b59627eb648 @cond=["a", "b"], @kind="ifneq", @arg=["a=b\\\nc=d"], @arg_else="">]
subst  : RM = rm
subst  : YEAR=08
subst  : LAST_BASELINE_ID = 0563
subst  : LAST_YEAR = $(shell printf "%02d" $$((20$(YEAR) - 2000 - 1)))
subst  : FIRST_UPDATE_ID = $(shell printf "%04d" $$((1$(LAST_BASELINE_ID) - 10000 + 1)))
subst  : PERL = /usr/bin/perl
subst  : MD5  = /usr/bin/md5sum
subst  : RUBY = /usr/bin/ruby
subst  : GXX430_LIBPATH = /usr/local/gcc/lib64:/usr/local/gcc/lib
subst  : ROOT = .
subst  : PROG_DIR = $(ROOT)/tools
subst  : ORIG_DIR = $(ROOT)/pubmed-20$(YEAR)
subst  : OUT_DIR_BASE = $(ROOT)/data-20$(YEAR)
subst  : PREV_OUT_DIR_BASE = $(ROOT)/data-20$(LAST_YEAR)
subst  : CURR_OUT_DIR_BASE = $(OUT_DIR_BASE)
subst  : ARTICLE_TBL_BASE = $(OUT_DIR_BASE)/article-tables
subst  : EXPORT_BASE      = $(OUT_DIR_BASE)/export
subst  : WORK_BASE        = $(OUT_DIR_BASE)/work
subst  : EXPORT_SERVER_DIR  = $(PROG_DIR)/thttpd
subst  : EXPORT_SERVER_PORT = 10080
subst  : EXPORT_SERVER_LOG  = $(WORK_BASE)/httpd.log
subst  : EXPORT_SERVER_PID  = $(WORK_BASE)/httpd.pid
subst  : WEEKLY_UPDATE = 0
subst  : PARALLEL_PARSING = 0
subst  : DO_TBL         = 1
subst  : DO_IMPORT      = 1
subst  : DO_BIB         = 1
subst  : DO_SS          = 1
subst  : DO_EX_TXT      = 1
subst  : DO_EX_ENJU     = 1
subst  : DO_ENJU        = 1
subst  : DO_KSDEP       = 1
subst  : DO_GENE_NE     = 1
subst  : DO_OTHER_NE    = 1
subst  : DO_MERGE       = 1
subst  : DO_EE          = 1
subst  : DO_STAG        = 1
subst  : DO_PPI         = 1
subst  : DO_DGA         = 1
subst  : DO_COOCC       = 1
subst  : DO_ICONVERTER  = 1
subst  : DO_MEDIE_INPUT = 1
subst  : DO_MEDIE_DB    = 1
subst  : DO_EXPORT      = 1
subst  : ID=0001
subst  : FILE_ID=medline$(YEAR)n$(ID)
subst  : M2M_DIR = $(PROG_DIR)/medline2medie
subst  : SOM_DIR   = $(PROG_DIR)/StandOffManager
subst  : SOM       = $(SOM_DIR)/som
subst  : TAG_ORDER = $(SOM_DIR)/script/tagOrder.enju-2_2.tag 
subst  : CLIP_TAG  = $(SOM_DIR)/script/tagsToClip.tag
subst  : GENIASS_DIR     = $(PROG_DIR)/geniass
subst  : GENIASS         = $(GENIASS_DIR)/run_geniass.sh
subst  : MAKE_MAPPING    = $(GENIASS_DIR)/makeMapping
subst  : REMAP_STAND_OFF = $(GENIASS_DIR)/remapStandOff
subst  : ENJU = $(PROG_DIR)/enju/run-enju -so -genia
subst  : GENE_NER_ENV      = env LD_LIBRARY_PATH=$(GXX430_LIBPATH):$$LD_LIBRARY_PATH 
subst  : GENE_NER_DIR      = $(PROG_DIR)/MEDIE_NER
subst  : GENE_NER          = $(GENE_NER_ENV) $(GENE_NER_DIR)/MedT_NER/medt_ner
subst  : NER_POST_FILTER   = $(GENE_NER_ENV) $(GENE_NER_DIR)/filter_words/filter_words
subst  : GENE_NE_THRESHOLD = 0.015
subst  : GENE_NER_FILTER_OPTS=\
         -tag  Article \
         -a    filter \
         -thr  0.0 \
         -m    $(GENE_NER_DIR)/model/filter.output \
         -s    $(GENE_NER_DIR)/model/filter.dict \
         -init $(GENE_NER_DIR)/model/gena.mtn
subst  : GENE_NER_DISAMB_OPTS=\
         -tag  Article \
         -a    rdisamb \
         -m    $(GENE_NER_DIR)/model/disamb.output \
         -s    $(GENE_NER_DIR)/model/disamb.dict \
         -init $(GENE_NER_DIR)/model/gena.mtn
subst  : NER_POST_FILTER_OPTS=\
         -w $(GENE_NER_DIR)/filter_words/stop_word.txt \
         -p $(GENE_NER_DIR)/filter_words/stop_pos.txt
subst  : OTHER_NER_DIR    = $(PROG_DIR)/disease_longest_ner
subst  : OTHER_NER_BIN    = $(OTHER_NER_DIR)/longest_ner
subst  : OTHER_NER_FORMAT = $(OTHER_NER_DIR)/facta_ne_format.txt
subst  : OTHER_NER_DICT   = $(OTHER_NER_DIR)/facta_dict.ln
subst  : OTHER_NER = $(OTHER_NER_BIN) -format $(OTHER_NER_FORMAT) -usedict $(OTHER_NER_DICT)
subst  : GENA_DICT_DIR = $(PROG_DIR)/Gena-20051011
subst  : ADD_LEX_HEAD        = $(PERL) $(M2M_DIR)/add_lex_head.perl
subst  : COMPATIBLE          = $(PERL) $(M2M_DIR)/compatible.perl
subst  : MERGE_ENJU_OUTPUT   = $(PERL) $(M2M_DIR)/merge_enju_output.perl
subst  : BIB_TAGGER          = $(PERL) $(M2M_DIR)/bib_tagger.perl $(M2M_DIR)/bib_pubmed.dat
subst  : CHANGE_ID           = $(PERL) $(M2M_DIR)/change_id.perl
subst  : CREATE_IFACTOR      = $(PERL) $(M2M_DIR)/createIFfile.perl
subst  : MAKE_ARTICLE_TABLE  = $(PERL) $(M2M_DIR)/make_tbl_one.09
subst  : MERGE_ARTICLE_TABLE = $(PERL) $(M2M_DIR)/merge_txt_tbl.perl
subst  : MAKE_ENJU_SRC       = $(PERL) $(M2M_DIR)/make_enju_src.09
subst  : MAKE_ENJU_SO        = $(PERL) $(M2M_DIR)/make_enju_so.09
subst  : MAKE_ENJU_SO_IDX    = $(PERL) $(M2M_DIR)/make_enju_so_idx.perl
subst  : RUNE_CONFIG         = $(PERL) $(M2M_DIR)/runeconf.prl
subst  : SORT_BY_ARTICLE     = $(PERL) $(M2M_DIR)/sort_by_article.perl
subst  : MERGE_GENA_DATA     = $(PERL) $(M2M_DIR)/merge_gena_data.perl
subst  : DEP2SO              = $(PERL) $(M2M_DIR)/dep2so.prl
subst  : POS2CONLL           = $(PERL) $(M2M_DIR)/pos2conll.prl
subst  : MAKE_STAGGER_INPUT       = $(PERL) $(M2M_DIR)/make_stagger_input.perl
subst  : MERGE_STAGGER_OUTPUT     = $(PERL) $(M2M_DIR)/merge_stagger_output.perl
subst  : EXTRACT_SENTENCE_TEXT    = $(PERL) $(M2M_DIR)/extract_sentence_text.perl
subst  : GENE_NE_THRESHOLD_FILTER = $(PERL) $(M2M_DIR)/confidence_filter.perl filter_confidence
subst  : MAKE_SUMMARY_REC         = $(PERL) $(M2M_DIR)/make_summary_rec.perl
subst  : GENIA_TAGGER = (cd $(PROG_DIR)/geniatagger && ./geniatagger)
subst  : AKANE_PPI_PATH = $(PROG_DIR)/AkanePPI
subst  : AKANE_PPI      = $(AKANE_PPI_PATH)/akane
subst  : AKANE_MODEL    = $(AKANE_PPI_PATH)/AIMed/Enju_TK_Words.linear.model
subst  : PPI_THRESHOLD_FILTER = $(PERL) $(M2M_DIR)/confidence_filter.perl confidence
subst  : PPI_THRESHOLD = 0
subst  : KSDEP_PATH  = $(PROG_DIR)/ksdep
subst  : KSDEP       = $(KSDEP_PATH)/ksdep
subst  : KSDEP_MODEL = $(KSDEP_PATH)/genia.mod
subst  : EE_TAGGER_DIR  = $(PROG_DIR)/ee
subst  : EE_TAGGER_DICT = $(EE_TAGGER_DIR)/eedict.lst
subst  : EE_TAGGER_CONF = $(EE_TAGGER_DIR)/eet.conf
subst  : EE_TAGGER      = $(EE_TAGGER_DIR)/eet
subst  : STAGGER = $(PROG_DIR)/abstruct/bin/sentence_tagger.sh
subst  : MAKE_DB     = $(PROG_DIR)/medie-noBDB/makeDB/read-file
subst  : DB_ATTRLIST = $(M2M_DIR)/medie.attrlist
subst  : DB_SETTING  = $(M2M_DIR)/medie.setting
subst  : DGA_DIR           = $(PROG_DIR)/dga
subst  : DGA               = $(DGA_DIR)/run_dga.sh
subst  : DGA_INPUT_FILTER  = $(PERL) $(DGA_DIR)/input_filter.perl
subst  : DGA_OUTPUT_FILTER = $(PERL) $(DGA_DIR)/output_filter.perl
subst  : INFOP_DIR   = $(PROG_DIR)/info-pubmed
subst  : FIND_COOCC  = $(INFOP_DIR)/WEB-INF/src/C++/FindCoocc/find_coocc
subst  : ICONVERTER  = $(INFOP_DIR)/WEB-INF/src/C++/IConverter/IConverter
subst  : COLLECT_DEL = $(PERL) $(INFOP_DIR)/WEB-INF/script/collect_del.prl
subst  : OUT_DIR = $(OUT_DIR_BASE)/$(FILE_ID)
subst  : PREV_ALL_TBL_GZ      = $(ARTICLE_TBL_BASE)/20$(LAST_YEAR).all.txt-tbl.gz
subst  : CURR_BASELINE_TBL_GZ = $(ARTICLE_TBL_BASE)/20$(YEAR).baseline.txt-tbl.gz
subst  : PUBMED_XML_GZ     = $(ORIG_DIR)/$(FILE_ID).xml.gz
subst  : PUBMED_XML_GZ_MD5 = $(ORIG_DIR)/$(FILE_ID).xml.gz.md5
subst  : IMPORT_DIR    = $(OUT_DIR)
subst  : PUBMED_TXT_GZ = $(IMPORT_DIR)/$(FILE_ID).txt.gz
subst  : PUBMED_SO_GZ  = $(IMPORT_DIR)/$(FILE_ID).so.gz
subst  : ABST_TXT_GZ = $(IMPORT_DIR)/$(FILE_ID).abst.txt.gz
subst  : ABST_SO_GZ  = $(IMPORT_DIR)/$(FILE_ID).abst.so.gz
subst  : TXT_TBL_GZ = $(IMPORT_DIR)/$(FILE_ID).txt-tbl.gz
subst  : SO_SRC_GZ  = $(IMPORT_DIR)/$(FILE_ID).so-src.gz
subst  : EX_TXT_GZ  = $(IMPORT_DIR)/$(FILE_ID).ex.txt.gz
subst  : SS_OUT_DIR  = $(OUT_DIR)
subst  : ABST_SS_GZ  = $(SS_OUT_DIR)/$(FILE_ID).abst.ss.gz
subst  : ABST_SS_MAP = $(SS_OUT_DIR)/$(FILE_ID).abst.ss.map
subst  : EX_SS_GZ    = $(SS_OUT_DIR)/$(FILE_ID).ex.ss.gz
subst  : EX_SS_MAP   = $(SS_OUT_DIR)/$(FILE_ID).ex.ss.map
subst  : ENJU_OUT_DIR = $(OUT_DIR)
subst  : SUBFILE_LIST   = $(ENJU_OUT_DIR)/$(FILE_ID).abst.ss.subfile-list
subst  : READY_TO_MERGE = $(ENJU_OUT_DIR)/$(FILE_ID).abst.ss.ready-to-merge
subst  : ABST_SS_ENJU_SO_GZ = $(ENJU_OUT_DIR)/$(FILE_ID).abst.ss.enju.so.gz
subst  : EX_SS_ENJU_SO_GZ = $(ENJU_OUT_DIR)/$(FILE_ID).ex.ss.enju.so.gz
subst  : EX_ENJU_SO_GZ    = $(ENJU_OUT_DIR)/$(FILE_ID).ex.enju.so.gz
subst  : ENJU_SO_SUFFIX = .enju.so
subst  : ENJU_SO_IDX    = $(ENJU_OUT_DIR)/$(FILE_ID)$(ENJU_SO_SUFFIX).idx
subst  : ENJU_SO_DAT    = $(ENJU_OUT_DIR)/$(FILE_ID)$(ENJU_SO_SUFFIX).dat
subst  : KSDEP_OUT_DIR = $(OUT_DIR)
subst  : ABST_SS_KSDEP_OUT_GZ = $(KSDEP_OUT_DIR)/$(FILE_ID).abst.ss.ksdep.out.gz
subst  : ABST_SS_KSDEP_SO_GZ  = $(KSDEP_OUT_DIR)/$(FILE_ID).abst.ss.ksdep.so.gz
subst  : EX_SS_KSDEP_OUT_GZ   = $(KSDEP_OUT_DIR)/$(FILE_ID).ex.ss.ksdep.out.gz
subst  : EX_SS_KSDEP_SO_GZ    = $(KSDEP_OUT_DIR)/$(FILE_ID).ex.ss.ksdep.so.gz
subst  : EX_KSDEP_SO_GZ       = $(KSDEP_OUT_DIR)/$(FILE_ID).ex.ksdep.so.gz
subst  : KSDEP_SO_SUFFIX = .ksdep.so
subst  : KSDEP_SO_IDX    = $(KSDEP_OUT_DIR)/$(FILE_ID)$(KSDEP_SO_SUFFIX).idx
subst  : KSDEP_SO_DAT    = $(KSDEP_OUT_DIR)/$(FILE_ID)$(KSDEP_SO_SUFFIX).dat
subst  : GENE_NE_OUT_DIR   = $(OUT_DIR)
subst  : GENE_NE_ALL_SO_GZ = $(GENE_NE_OUT_DIR)/$(FILE_ID).gene-ne-all.so.gz
subst  : GENE_NE_SO_GZ     = $(GENE_NE_OUT_DIR)/$(FILE_ID).gene-ne.so.gz
subst  : OTHER_NE_OUT_DIR = $(OUT_DIR)
subst  : OTHER_NE_SO_GZ   = $(OTHER_NE_OUT_DIR)/$(FILE_ID).other-ne.so.gz
subst  : EE_OUT_DIR = $(OUT_DIR)
subst  : EE_SO_GZ   = $(EE_OUT_DIR)/$(FILE_ID).ee.so.gz
subst  : STAG_OUT_DIR = $(OUT_DIR)
subst  : STAG_SO_GZ   = $(STAG_OUT_DIR)/$(FILE_ID).stag.so.gz
subst  : BIB_OUT_DIR = $(OUT_DIR)
subst  : BIB_SO      = $(BIB_OUT_DIR)/$(FILE_ID).bib.so
subst  : PPI_OUT_DIR     = $(OUT_DIR)
subst  : PPI_SO_GZ       = $(PPI_OUT_DIR)/$(FILE_ID).ppi.so.gz
subst  : AKANE_LOG       = $(PPI_OUT_DIR)/$(FILE_ID).akane.log
subst  : RUNE_CONFIG_XML = $(PPI_OUT_DIR)/$(FILE_ID).runeconf.xml
subst  : DGA_OUT_DIR = $(OUT_DIR)
subst  : DGA_SO_GZ   = $(DGA_OUT_DIR)/$(FILE_ID).dga.so.gz
subst  : COOCC_OUT_DIR = $(OUT_DIR)
subst  : COOCC_SO_GZ   = $(COOCC_OUT_DIR)/$(FILE_ID).coocc.so.gz
subst  : MEDIE_INPUT_OUT_DIR = $(OUT_DIR)
subst  : MEDIE_INPUT_XML_GZ  = $(MEDIE_INPUT_OUT_DIR)/$(FILE_ID).medie-input.xml.gz
subst  : DB_OUT_DIR = $(OUT_DIR)/medie_db
subst  : MAKE_DB_LOG        = $(DB_OUT_DIR)/$(FILE_ID).make_db.log
subst  : MEDIE_DB_TIMESTAMP = $(DB_OUT_DIR)/$(FILE_ID).medie_db.time-stamp
subst  : UPDATE_SUMMARY = $(OUT_DIR)/$(FILE_ID).summary
subst  : DEL_OUT_DIR = $(OUT_DIR)
subst  : DEL_GZ      = $(DEL_OUT_DIR)/$(FILE_ID).del.gz
subst  : ICONVERTER_OUT_DIR = $(OUT_DIR)
subst  : PREOUT             = $(ICONVERTER_OUT_DIR)/$(FILE_ID).preout
subst  : DELCIT             = $(ICONVERTER_OUT_DIR)/$(FILE_ID).delcit
subst  : EXPORT_TGZ = $(EXPORT_BASE)/$(FILE_ID).export.tgz
subst  : PUBMED_TXT = $(OUT_DIR)/$(FILE_ID).txt
subst  : PUBMED_SO  = $(OUT_DIR)/$(FILE_ID).so
subst  : ABST_TXT   = $(OUT_DIR)/$(FILE_ID).abst.txt
subst  : ABST_SO    = $(OUT_DIR)/$(FILE_ID).abst.so
subst  : ABST_SS    = $(OUT_DIR)/$(FILE_ID).abst.ss
subst  : EX_TXT     = $(OUT_DIR)/$(FILE_ID).ex.txt
subst  : EX_SS      = $(OUT_DIR)/$(FILE_ID).ex.ss
subst  : INTER += $(PUBMED_TXT)
subst  : INTER += $(PUBMED_SO)
subst  : INTER += $(ABST_TXT)
subst  : INTER += $(ABST_SO)
subst  : INTER += $(ABST_SS)
subst  : INTER += $(EX_TXT)
subst  : INTER += $(EX_SS)
subst  : ENJU_SO     = $(OUT_DIR)/$(FILE_ID).enju.so
subst  : KSDEP_SO    = $(OUT_DIR)/$(FILE_ID).ksdep.so
subst  : GENE_NE_SO  = $(OUT_DIR)/$(FILE_ID).gene-ne.so
subst  : OTHER_NE_SO = $(OUT_DIR)/$(FILE_ID).other-ne.so
subst  : EE_SO       = $(OUT_DIR)/$(FILE_ID).ee.so
subst  : STAG_SO     = $(OUT_DIR)/$(FILE_ID).stag.so
subst  : PPI_SO      = $(OUT_DIR)/$(FILE_ID).ppi.so
subst  : INTER += $(ENJU_SO)
subst  : INTER += $(KSDEP_SO)
subst  : INTER += $(GENE_NE_SO)
subst  : INTER += $(OTHER_NE_SO)
subst  : INTER += $(EE_SO)
subst  : INTER += $(STAG_SO)
subst  : INTER += $(PPI_SO)
subst  : ENJU_SO_RAW_GZ = $(OUT_DIR)/$(FILE_ID).enju.so.raw.gz
subst  : KSDEP_SO_RAW_GZ = $(OUT_DIR)/$(FILE_ID).ksdep.so.raw.gz
subst  : INTER += $(ENJU_SO_RAW_GZ)
subst  : INTER += $(KSDEP_SO_RAW_GZ)
subst  : ALL_NE_SO              = $(OUT_DIR)/$(FILE_ID).all-ne.so
subst  : ENJU_NE_SO_GZ          = $(OUT_DIR)/$(FILE_ID).enju-ne.so.gz
subst  : PUBMED_ENJU_NE_SO_GZ   = $(OUT_DIR)/$(FILE_ID).pubmed-enju-ne.so.gz
subst  : PPI_INPUT_SO           = $(OUT_DIR)/$(FILE_ID).ppi-input.so
subst  : ICONVERTER_INPUT_SO_GZ = $(OUT_DIR)/$(FILE_ID).iconverter-input.so.gz
subst  : MEDIE_INPUT_XML        = $(OUT_DIR)/$(FILE_ID).medie-input.xml
subst  : MEDIE_INPUT_SO_GZ      = $(OUT_DIR)/$(FILE_ID).medie-input.so.gz
subst  : INTER += $(ALL_NE_SO)
subst  : INTER += $(ENJU_NE_SO_GZ)
subst  : INTER += $(PUBMED_ENJU_NE_SO_GZ)
subst  : INTER += $(PPI_INPUT_SO)
subst  : INTER += $(ICONVERTER_INPUT_SO_GZ)
subst  : INTER += $(MEDIE_INPUT_XML)
subst  : INTER += $(MEDIE_INPUT_SO_GZ)

subst  : GENE_NE_FILTER_SO = $(OUT_DIR)/$(FILE_ID).gene-ne-filter.so
subst  : GENE_NE_DISAMB_SO = $(OUT_DIR)/$(FILE_ID).gene-ne-disamb.so
subst  : OTHER_NE_MATCH_SO = $(OUT_DIR)/$(FILE_ID).other-ne-match.so
subst  : INTER += $(GENE_NE_FILTER_SO)
subst  : INTER += $(GENE_NE_DISAMB_SO)
subst  : INTER += $(OTHER_NE_MATCH_SO)
depend : .INTERMEDIATE: $(INTER)
err    :define BEGIN_STEP
err    :echo "
err    :echo "
err    :echo $^ | xargs -n 1 echo "
err    :echo $@ | xargs -n 1 echo "
err    :echo "
err    :endef
err    :define END_STEP
err    :echo "
err    :echo "
err    :echo "
err    :endef
subst  : MY_GZIP=sh -c 'gzip -c $$0.ungz > $$0 && $(RM) $$0.ungz' 
subst  : PCHECK=\
if [ `echo $${PIPESTATUS[@]} | tr -d " "` -ne 0 ]; then $(RM) -f $@; exit 1; fi
depend : .PHONY: echo
depend : echo:
command: 	@echo $($(VARNAME))
depend : .PHONY: usage_error
depend : usage_error: 
command: 	@echo "You must specify a make-target"
command: 	@exit 1
command: .PHONY: begin_msg end_msg out_dir \
        ex_txt ex_enju_so enju_so \
        preout coocc medie all exp \
		ppi ee dga medie_xml gene_ne other_ne \
		clean_db clean_db_
depend : ex_txt:     begin_msg out_dir $(TXT_TBL_GZ) $(SO_SRC_GZ) $(EX_TXT_GZ) end_msg
depend : ex_ss:      begin_msg out_dir $(EX_SS_GZ) $(EX_SS_MAP) end_msg
depend : ex_enju_so:  begin_msg out_dir $(EX_ENJU_SO_GZ)  end_msg
depend : ex_ksdep_so: begin_msg out_dir $(EX_KSDEP_SO_GZ) end_msg
depend : enju_so:    begin_msg out_dir $(ENJU_SO_IDX) $(ENJU_SO_DAT) end_msg
depend : ksdep_so:   begin_msg out_dir $(KSDEP_SO_IDX) $(KSDEP_SO_DAT) end_msg
depend : gene_ne:    begin_msg out_dir $(GENE_NE_SO_GZ)  end_msg
depend : other_ne:   begin_msg out_dir $(OTHER_NE_SO_GZ) end_msg
depend : ppi:        begin_msg out_dir $(PPI_SO_GZ)      end_msg
depend : dga:        begin_msg out_dir $(DGA_SO_GZ)      end_msg
depend : ee:         begin_msg out_dir $(EE_SO_GZ)       end_msg
depend : coocc:      begin_msg out_dir $(COOCC_SO_GZ)    end_msg
depend : preout:     begin_msg out_dir $(PREOUT) $(DELCIT)   end_msg
depend : medie_xml:  begin_msg out_dir $(MEDIE_INPUT_XML_GZ) end_msg
depend : medie:      begin_msg out_dir $(MEDIE_DB_TIMESTAMP) end_msg
depend : all:        begin_msg out_dir $(MEDIE_DB_TIMESTAMP) $(PREOUT) $(DELCIT) end_msg
depend : exp:        begin_msg out_dir $(EXPORT_TGZ) end_msg
depend : clean_db:   begin_msg out_dir clean_db_ end_msg
depend : begin_msg :
command: 	@echo "
command: 	@echo "
command: 	@echo "
command: 	@echo "
command: 	@echo "
command: 	@echo "
command: 	@echo "
depend : end_msg :
command: 	@echo "
command: 	@echo "
command: 	@echo "
depend : out_dir :
command: 	@mkdir -p $(OUT_DIR)
depend : clean_db_:
command: 	$(RM) -rf $(DB_OUT_DIR)
depend : $(PUBMED_TXT)  : $(PUBMED_TXT_GZ)
command: 	echo '$(PUBMED_TXT_GZ)'
command: 	@$(BEGIN_STEP)
command: 	zcat $^ > $@
depend : $(PUBMED_SO)   : $(PUBMED_SO_GZ)   ; zcat $^ > $@
depend : $(ABST_TXT)    : $(ABST_TXT_GZ)    ; zcat $^ > $@
depend : $(ABST_SO)     : $(ABST_SO_GZ)     ; zcat $^ > $@
depend : $(ABST_SS)     : $(ABST_SS_GZ)     ; zcat $^ > $@
depend : $(EX_TXT)      : $(EX_TXT_GZ)      ; zcat $^ > $@
depend : $(EX_SS)       : $(EX_SS_GZ)       ; zcat $^ > $@
depend : $(ENJU_SO)     : $(ENJU_SO_DAT)    ; zcat $^ > $@
depend : $(KSDEP_SO)    : $(KSDEP_SO_DAT)   ; zcat $^ > $@
depend : $(GENE_NE_SO)  : $(GENE_NE_SO_GZ)  ; zcat $^ > $@
depend : $(OTHER_NE_SO) : $(OTHER_NE_SO_GZ) ; zcat $^ > $@
depend : $(EE_SO)       : $(EE_SO_GZ)       ; zcat $^ > $@
depend : $(STAG_SO)     : $(STAG_SO_GZ)     ; zcat $^ > $@
depend : $(MEDIE_INPUT_XML) : $(MEDIE_INPUT_XML_GZ) ; zcat $^ > $@
[]
